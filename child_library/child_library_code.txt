Отличный проект!  Использование Tkinter, SQLite и даже хеширования паролей — это здорово.  Однако, добавление генерации штрих-кодов и QR-кодов, а также связывание книг и читателей требует значительных изменений в коде.  Давайте разберем это поэтапно.

1. Генерация штрих-кодов и QR-кодов:

Для генерации штрих-кодов и QR-кодов нам понадобится библиотека.  Популярный выбор — qrcode для QR-кодов и zbarlight для штрих-кодов (хотя zbarlight больше для считывания, чем для генерации, возможно, потребуется другая библиотека, специально для генерации штрихкодов, например python-barcode).  Установим их:

Bash
Копировать
pip install qrcode python-barcode
Теперь добавим функции для генерации:

Python
Копировать
import qrcode
from barcode import EAN13
from barcode.writer import ImageWriter

def generate_qrcode(data, filename):
    img = qrcode.make(data)
    img.save(filename)

def generate_ean13(data, filename):
    ean = EAN13(data, writer=ImageWriter())
    ean.save(filename)

Функции generate_qrcode и generate_ean13 создают QR-код и штрих-код EAN13 соответственно и сохраняют их в файл.  data — это идентификатор книги или читателя (например, ID из базы данных).  filename — путь к файлу, куда будет сохранен код.

2. Модификация базы данных:

Нам нужно добавить поля для хранения путей к изображениям штрих-кодов и QR-кодов в таблицы books и readers:

SQL
Копировать
ALTER TABLE books ADD COLUMN qr_code_path TEXT;
ALTER TABLE readers ADD COLUMN qr_code_path TEXT;
А также добавить таблицу для хранения информации о выдаче книг:

SQL
Копировать
CREATE TABLE IF NOT EXISTS book_loans (
    id INTEGER PRIMARY KEY,
    book_id INTEGER,
    reader_id INTEGER,
    loan_date TEXT,
    return_date TEXT,
    FOREIGN KEY (book_id) REFERENCES books(id),
    FOREIGN KEY (reader_id) REFERENCES readers(id)
);
3. Связывание книг и читателей (через таблицу book_loans):

Функции для выдачи и возврата книг:

Python
Копировать
def loan_book(book_id, reader_id):
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO book_loans (book_id, reader_id, loan_date) VALUES (?, ?, date('now'))", (book_id, reader_id))
    conn.commit()
    conn.close()

def return_book(book_id, reader_id):
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE book_loans SET return_date = date('now') WHERE book_id = ? AND reader_id = ? AND return_date IS NULL", (book_id, reader_id))
    conn.commit()
    conn.close()

4.  Изменение интерфейса Tkinter:
Вам потребуется добавить поля для ввода данных о книге и читателе, кнопки для генерации кодов, выдачи и возврата книг, а также области для отображения информации о книгах, читателях и их взаимосвязи.  Это потребует значительной переработки Вашего текущего интерфейса.

5.  Отображение информации:

Запросы к базе данных для отображения информации:

Список невозвращенных книг для читателя: SELECT b.title FROM book_loans bl JOIN books b ON bl.book_id = b.id WHERE bl.reader_id = ? AND bl.return_date IS NULL
Читатель, взявший книгу: SELECT r.name FROM book_loans bl JOIN readers r ON bl.reader_id = r.id WHERE bl.book_id = ? AND bl.return_date IS NULL
Это лишь план.  Реализация потребует значительных усилий по написанию кода и проектированию интерфейса.  Начните с добавления генерации кодов и модификации базы данных.  Затем, пошагово,  добавьте функционал выдачи/возврата книг и обновление интерфейса.  Какую часть Вы хотите реализовать сначала?  Давайте сфокусируемся на одном шаге за раз.

import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from PIL import Image, ImageTk
import hashlib

# ... (предыдущий код) ...

# Вкладка "Администратор"
tab5 = ttk.Frame(tab_control)
tab_control.add(tab5, text='Администратор')

# Виджеты для авторизации
password_label = tk.Label(tab5, text="Пароль:")
password_entry = tk.Entry(tab5, show="*")
login_button = tk.Button(tab5, text="Войти", command=lambda:check_password_and_show_admin_panel(password_entry.get()))

password_label.pack(pady=5)
password_entry.pack(pady=5)
login_button.pack(pady=5)

def check_password_and_show_admin_panel(input_password):
    if check_password(input_password):
        # Скрываем форму авторизации
        password_label.pack_forget()
        password_entry.pack_forget()
        login_button.pack_forget()

        # Показываем элементы административной панели
        # ... (Здесь будет код для отображения элементов управления) ...
        messagebox.showinfo("Успех", "Вход выполнен успешно!")
    else:
        messagebox.showerror("Ошибка", "Неверный пароль")

# ... (остальной код) ...

load_image(tab1, 'main_image.png')
load_image(tab2, 'readers_image.png')
load_image(tab3, 'books_image.png')
load_image(tab4, 'library_image.png')
load_image(tab5, 'admin_image.png')

root.mainloop()
Этот код добавляет форму авторизации на вкладку "Администратор". После успешного входа, форма авторизации скрывается,  и  # ... (Здесь будет код для отображения элементов управления) ...  будет заменен на  виджеты для администрирования.  Обратите внимание на использование lambda для передачи значения из password_entry в функцию check_password_and_show_admin_panel.


