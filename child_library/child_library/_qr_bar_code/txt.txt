Отличный проект!  Использование Tkinter, SQLite и даже хеширования паролей — это здорово.  Однако, добавление генерации штрих-кодов и QR-кодов, а также связывание книг и читателей требует значительных изменений в коде.  Давайте разберем это поэтапно.

1. Генерация штрих-кодов и QR-кодов:

Для генерации штрих-кодов и QR-кодов нам понадобится библиотека.  Популярный выбор — qrcode для QR-кодов и zbarlight для штрих-кодов (хотя zbarlight больше для считывания, чем для генерации, возможно, потребуется другая библиотека, специально для генерации штрихкодов, например python-barcode).  Установим их:

Bash
Копировать
pip install qrcode python-barcode
Теперь добавим функции для генерации:

Python
Копировать
import qrcode
from barcode import EAN13
from barcode.writer import ImageWriter

def generate_qrcode(data, filename):
    img = qrcode.make(data)
    img.save(filename)

def generate_ean13(data, filename):
    ean = EAN13(data, writer=ImageWriter())
    ean.save(filename)

Функции generate_qrcode и generate_ean13 создают QR-код и штрих-код EAN13 соответственно и сохраняют их в файл.  data — это идентификатор книги или читателя (например, ID из базы данных).  filename — путь к файлу, куда будет сохранен код.

2. Модификация базы данных:

Нам нужно добавить поля для хранения путей к изображениям штрих-кодов и QR-кодов в таблицы books и readers:

SQL
Копировать
ALTER TABLE books ADD COLUMN qr_code_path TEXT;
ALTER TABLE readers ADD COLUMN qr_code_path TEXT;
А также добавить таблицу для хранения информации о выдаче книг:

SQL
Копировать
CREATE TABLE IF NOT EXISTS book_loans (
    id INTEGER PRIMARY KEY,
    book_id INTEGER,
    reader_id INTEGER,
    loan_date TEXT,
    return_date TEXT,
    FOREIGN KEY (book_id) REFERENCES books(id),
    FOREIGN KEY (reader_id) REFERENCES readers(id)
);
3. Связывание книг и читателей (через таблицу book_loans):

Функции для выдачи и возврата книг:

Python
Копировать
def loan_book(book_id, reader_id):
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO book_loans (book_id, reader_id, loan_date) VALUES (?, ?, date('now'))", (book_id, reader_id))
    conn.commit()
    conn.close()

def return_book(book_id, reader_id):
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE book_loans SET return_date = date('now') WHERE book_id = ? AND reader_id = ? AND return_date IS NULL", (book_id, reader_id))
    conn.commit()
    conn.close()

4.  Изменение интерфейса Tkinter:
Вам потребуется добавить поля для ввода данных о книге и читателе, кнопки для генерации кодов, выдачи и возврата книг, а также области для отображения информации о книгах, читателях и их взаимосвязи.  Это потребует значительной переработки Вашего текущего интерфейса.

5.  Отображение информации:

Запросы к базе данных для отображения информации:

Список невозвращенных книг для читателя: SELECT b.title FROM book_loans bl JOIN books b ON bl.book_id = b.id WHERE bl.reader_id = ? AND bl.return_date IS NULL
Читатель, взявший книгу: SELECT r.name FROM book_loans bl JOIN readers r ON bl.reader_id = r.id WHERE bl.book_id = ? AND bl.return_date IS NULL
Это лишь план.  Реализация потребует значительных усилий по написанию кода и проектированию интерфейса.  Начните с добавления генерации кодов и модификации базы данных.  Затем, пошагово,  добавьте функционал выдачи/возврата книг и обновление интерфейса.  Какую часть Вы хотите реализовать сначала?  Давайте сфокусируемся на одном шаге за раз.
